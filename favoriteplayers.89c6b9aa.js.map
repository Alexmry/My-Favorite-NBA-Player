{"version":3,"sources":["src/favoriteplayers.js"],"names":["addItems","document","querySelector","itemsList","deletePlayers","items","JSON","parse","localStorage","getItem","addItem","e","preventDefault","text","item","value","done","push","populateList","setItem","stringify","reset","players","innerHTML","map","player","i","join","toggleDone","target","matches","el","index","dataset","deleteItems","clear","addEventListener"],"mappings":";AAAA,IAAMA,EAAWC,SAASC,cAAc,cAClCC,EAAYF,SAASC,cAAc,YACnCE,EAAgBH,SAASC,cAAc,mBACzCG,EAAQC,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,GAIzD,SAASC,EAAQC,GACbA,EAAEC,iBAEIC,IACAC,EAAO,CACTD,KAFS,KAAKX,cAAc,eAAea,MAG3CC,MAAM,GAGVX,EAAMY,KAAKH,GACXI,EAAab,EAAOF,GAGpBK,aAAaW,QAAQ,QAASb,KAAKc,UAAUf,IAExCgB,KAAAA,QAIT,SAASH,IAAcI,IAAAA,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,IAAiB,UAAA,OAAA,EAAA,UAAA,QAAA,GAClCC,UAAYD,EAAQE,IAAI,SAACC,EAAQC,GAGGA,MAAAA,yEAAAA,OAAAA,EAAaA,aAAAA,OAAAA,EAAMD,MAAAA,OAAAA,EAAOT,KAAO,UAAY,GAC/DU,yCAAAA,OAAAA,EAAMD,MAAAA,OAAAA,EAAOZ,KAHvC,2CAMDc,KAAK,IAIZ,SAASC,EAAWjB,GAKZ,GAACA,EAAEkB,OAAOC,QAAQ,SAAlB,CACEC,IAEAC,EAFKrB,EAAEkB,OAEII,QAAQD,MAEzB3B,EAAM2B,GAAOhB,MAAQX,EAAM2B,GAAOhB,KAElCR,aAAaW,QAAQ,QAASb,KAAKc,UAAUf,IAE7Ca,EAAab,EAAOF,IAGxB,SAAS+B,EAAYvB,GAEjBH,aAAa2B,QAEbjB,EADAb,EAAQ,GACYF,GAKxBH,EAASoC,iBAAiB,SAAU1B,GAEpCP,EAAUiC,iBAAiB,QAASR,GAGpCxB,EAAcgC,iBAAiB,QAASF,GAIxChB,EAAab,EAAOF","file":"favoriteplayers.89c6b9aa.js","sourceRoot":"..","sourcesContent":["const addItems = document.querySelector('.add-items');\nconst itemsList = document.querySelector('.players');\nconst deletePlayers = document.querySelector('.delete-players');\nlet items = JSON.parse(localStorage.getItem('items')) || [];\n\n\n// pushing user input (item) into and empty array (items)\nfunction addItem(e) {\n    e.preventDefault();\n    // console.log('hello');\n    const text = this.querySelector('[name=item]').value;\n    const item = {\n        text: text,\n        done: false\n    };\n    // console.log(item);\n    items.push(item);\n    populateList(items, itemsList);\n\n    // local storage for storing my favorite players. We use stringify because items needs to be a string\n    localStorage.setItem('items', JSON.stringify(items));\n    \n    this.reset();\n};\n\n// Grabing all user inputs (players aka items in our case) and putting them in the list (playerList aka itemsList in our case)\nfunction populateList (players = [], playersList) {\n    playersList.innerHTML = players.map((player, i) => {\n        return `\n            <li>\n                <input type=\"checkbox\" data-index=${i} id=\"item${i}\" ${player.done ? 'checked' : ''} />\n                <label for=\"item${i}\">${player.text}</label>\n            </li>\n        `;\n    }).join('');\n};\n\n// for storing flagged MVPs\nfunction toggleDone(e) {\n    // console.log(e.target);\n    // when we console log the even.target, we get back the input tag and the label tag\n    \n    // does the target matches what we are looking for => so we can isolate the inputs and get ride of the labels\n    if (!e.target.matches('input')) return; // skip this unless it's an input\n    const el = e.target;\n    // console.log(el.dataset.index); => give use the index of the corresponding item in the array\n    const index = el.dataset.index;\n    // to do the toogle, is items[index].done = true, we set it to the opposite so it become false\n    items[index].done = !items[index].done;\n    // Once the toggle is done, we save it again in our local storage\n    localStorage.setItem('items', JSON.stringify(items));\n    // And we run again the function populateList to update the list with the new value (that has just been toggled)\n    populateList(items, itemsList);\n}\n\nfunction deleteItems(e) {\n    // console.log(e);\n    localStorage.clear();\n    items = [];\n    populateList(items, itemsList);\n};\n\n\n\naddItems.addEventListener('submit', addItem);\n\nitemsList.addEventListener('click', toggleDone);\n\n\ndeletePlayers.addEventListener('click', deleteItems);\n\n\n\npopulateList(items, itemsList);\n"]}